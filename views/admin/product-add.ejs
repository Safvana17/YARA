<%-include('../../views/partials/admin/header')%>
     <!-- CropperJS CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" />

<!-- Bootstrap 5 (Optional but used here) -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
        /* General Styling */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        :root {
            --primary-color: #1e90ff;
            --secondary-color: #2d3436;
            --success-color: #00b894;
            --danger-color: #d63031;
            --info-color: #0984e3;
            --light-gray: #dfe6e9;
            --background-color: #f5f6fa;
            --white: #ffffff;
            --shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
            --transition: all 0.3s ease;
        }

        .error-message {
            color: red;
            font-size: 0.875rem;
        }

        /* Main Section Styling */
        .content-main {
            padding: 3rem 2rem;
        }

        .content-header {
            margin-bottom: 2rem;
        }

        .content-title {
            font-size: 2rem;
            font-weight: bold;
        }

        /* Form Styling */
        .form-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            font-weight: 600;
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            font-size: 1rem;
            border-radius: 8px;
            border: 1px solid #ddd;
        }

        .form-group input[type="number"] {
            -moz-appearance: textfield;
        }

        .form-group select {
            cursor: pointer;
        }

        .form-actions {
            display: flex;
            justify-content: flex-start;
            margin-top: 1.5rem;
        }

        .form-actions button {
            background-color: #007bff;
            color: white;
            padding: 0.75rem 1.5rem;
            font-size: 1.125rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .form-actions button:hover {
            background-color: #0056b3;
        }

        /* Image Preview Styling */
        .image-preview {
            max-width: 100%;
            max-height: 200px;
            border: 1px solid #ddd;
            margin-top: 10px;
            border-radius: 8px;
        }

        .image-upload-container {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .thumbnail {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .thumbnail img {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 50%;
            margin-right: 10px;
        }
    </style>
<form action="/admin/add-product" id="productForm" method="post" enctype="multipart/form-data">
<div class="container mt-5">
    <h2>Add Products</h2>

    <!-- product basic info -->
     <div class="mb-3">
        <label for="name" class="form-label">Product Name</label>
        <input type="text" id="name" name="name" class="form-control" >
        <div id="name-error" class="error-message"></div>
     </div>
     <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <textarea name="description" id="description" class="form-control"></textarea>
        <div id="description-error" class="error-message"></div>
     </div>
     <!-- category and brand selection -->
     <div class="row">
      <div class="col-md-4 mb-3">
            <label for="cat" class="form-label">Category</label>
            <select name="categoryId" id="cat" class="form-select" required>
                <option value="" disabled selected></option>
                <% category.forEach(c => { %>
                    <option value="<%= c._id %>"><%= c.name %></option>
                <% }) %>
            </select>
            <div id="categoryId-error" class="error-message"></div>
        </div>       
        <div class="col-md-4 mb-3" id="brand-container">
            <label for="brand" class="form-label">Brand</label>
            <select name="brand" id="brand" class="form-select" required>
                <option value="" disabled selected>Select Brand</option>
                <% brand.forEach(b => { %>
                    <option value="<%= b._id %>"><%= b.brandName %></option>
                <% }) %>
            </select>
            <div id="brand-error" class="error-message"></div>
        </div>
     </div>
    <!-- price and quantity -->
     <div class="row">
        <div class="md-4 mb-3">
            <label for="regularprice" class="form-label">Regular Price</label>
            <input type="number" name="regularPrice" id="regularprice" class="form-control">
            <div id="regularprice-error" class="error-message"></div>
        </div>
        <div class="md-4 mb-3">
            <label for="saleprice" class="form-label">Sale Price</label>
            <input type="number" name="salePrice" id="saleprice" class="form-control">
            <div id="saleprice-error" class="error-message"></div>
        </div>
        <div class="md-4 mb-3">
            <label for="color" class="form-label">Colour</label>
            <input type="text" name="color" id="color" class="form-control">
            <div id="color-error" class="error-message"></div>
        </div>
     </div>
     <!-- variants -->
      <div id="variants">
        <h5>Product Variants</h5>
        <div class="variant mb-3 border p-3" >
            <label for="sku" class="form-label">SKU</label>
            <input type="text" id="sku" name="variants[0][sku]" placeholder="SKU" class="form-control variant-sku mb-2">
            <div class="sku-error error-message"></div>

            <label for="size" class="form-label">Size</label>
            <select name="variants[0][size]" id="size" class="form-select variant-size mb-2">
                <option value="" disabled selected>Select Size</option>
                <option value="S">S</option>
                <option value="M">M</option>
                <option value="L">L</option>
                <option value="XL">XL</option>
                <option value="XXL">XXL</option>
            </select>
            <div class="size-error error-message"></div>

            <label for="salePrice" class="form-label">Sale Price</label>
            <input type="number" id="salePricevariant" name="variants[0][price]" placeholder="Sale Price" class="form-control variant-price mb-2">
            <div class="salePrice-error error-message"></div>

            <label for="stock" class="form-label">Stock Quantity</label>
            <input type="text" id="stock" name="variants[0][stockQuantity]" placeholder="Stock" class="form-control variant-stock mb-2">
            <div class="stock-error error-message"></div>

        </div>
      </div>
      <!-- <button type="button" onclick="removeVariant(this)" class="btn btn-sm btn-danger">Remove</button> -->
      <button type="button" class="btn btn-outline-dark mb-3" onclick="addVariant()">+ Add Variant</button>
      
      <!-- image upload and cropper -->
       <div class="mb-3 image-upload-container">
        <% for(let i=1; i<=5; i++) { %>
            <div class="form-group">
                <label for="image<%=i %>">Image <%= i %></label>
                <input type="file" name="image<%= i %>" id="image<%= i %>" class="form-control" data-index="<%= i %>" accept="image/*" onchange="previewImage(event, <%= i %> )">

                <!-- preview and crop container -->
                 <div class="preview-container" style="margin-top: 10px; display: none;">
                    <img src="#" id="preview<%= i %>" alt="Image-preview" class="image-preview">

                    <button type="button" class="crop-save-btn" data-index="<%= i %>" style="display: none;">
                        Crop & Save
                    </button>
                 </div>
                 <!-- Hidden input to hold base64 data -->
                  <input type="hidden" name="croppedImages<%= i %>" id="croppedImages<%= i %>" value="">

                  <!-- error message -->
                   <div class="error-message" id="image<%= i %>-error"></div>
            </div>
        <% } %>
       <button type="submit" class="btn btn-success mt-4">Add Products</button>
    </div>
</form>


<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>

     let variantCount = 1
    function addVariant(){
        const html = `
    <div class="variant mb-3 border p-3">
       <label for="sku" class="form-label">SKU</label>
      <input type="text" name="variants[${variantCount}][sku]" placeholder="SKU" class="form-control variant-sku mb-2">
      <div class="sku-error error-message"></div>

      <label for="size" class="form-label">Size</label>
      <select name="variants[${variantCount}][size]" class="form-select variant-size mb-2">
        <option value= "" disabled selected>Select Size</option>
        <option value="S">S</option>
        <option value="M">M</option>
        <option value="L">L</option>
        <option value="XL">XL</option>
        <option value="XXL">XXL</option>
      </select>
      <div class="size-error error-message"></div>

      <label for="saleprice" class="form-label">Sale Price</label>
      <input type="number" name="variants[${variantCount}][price]" placeholder="Price" class="form-control variant-price mb-2">
      <div class="salePrice-error error-message"></div>

      <label for="stock" class="form-label">Stock Quantity</label>
      <input type="number" name="variants[${variantCount}][stockQuantity]" placeholder="Stock" class="form-control variant-stock mb-2">
      <div class="stock-error error-message"></div>

    </div>`;
  document.getElementById('variants').insertAdjacentHTML('beforeend', html);
  variantCount++;
}

let croppers = {}
let imageStatus = [false, false, false, false, false] //track each image is processed or not

function previewImage(event, index){
    const input = event.target
    const previewContainer = input.parentElement.querySelector('.preview-container')
    const preview = document.getElementById(`preview${index}`)
    const errorDiv = document.getElementById(`image${index}-error`)
    const cropBtn = previewContainer.querySelector('.crop-save-btn')

    //reset prev. state
    previewContainer.style.display = 'none'
    errorDiv.textContent = ''
    cropBtn.style.display = 'none'

    if(croppers[index]){
        croppers[index].destroy()
        delete croppers[index]
    }

    imageStatus[index - 1] = false

    if(input.files && input.files[0] ) {
        const file = input.files[0]
        const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/webp']
        const maxSize = 5 * 1024 * 1024 // 5MB

        if(!validImageTypes.includes(file.type)){
            errorDiv.textContent = 'Please select a valid image file (JPEG, PNG, GIF, BMP or WebP)'
            input.value = ''
            return
        }
        if(file.size > maxSize){
            errorDiv.textContent = 'Image size must be less than 5MB'
            input.value = ''
            return
        }

        const reader = new FileReader()
        reader.onload = function(e){
            preview.src = e.target.result
            previewContainer.style.display = 'block'
            cropBtn.style.display = 'inline-block'

            croppers[index] = new Cropper(preview, {
                aspectRatio: 1,
                viewMode: 1,
                autoCropArea: 1,
                ready: function(){
                    this.cropper.crop()
                }
            })
        }
        reader.readAsDataURL(file)
    }
}
    //event listener for crop and save button
    document.querySelectorAll('.crop-save-btn').forEach(button =>{
        button.addEventListener('click', function(){
            const index = parseInt(this.dataset.index)
            const previewContainer = this.parentElement
            const preview = previewContainer.querySelector('img')
            const cropBtn = this

            if(croppers[index]) {
                const croppedDataUrl = croppers[index].getCroppedCanvas().toDataURL('image/jpeg')
                document.getElementById(`croppedImages${index}`).value = croppedDataUrl
                preview.src = croppedDataUrl
                cropBtn.style.display = 'none'
                imageStatus[index - 1] = true
                croppers[index].destroy()
                delete croppers[index]

                Swal.fire({
                    icon: 'success',
                    title: 'Image Cropped',
                    text: `Image ${index} has been cropped and saved.`,
                    timer: 1200,
                    showConfirmButton: false
                })
            }else{
                Swal.fire({
                    icon: 'Warning',
                    title: 'Wit!!',
                    text: `Please wait for the image ${index} to load before cropping`,
                    timer: 1200,
                    showConfirmButton: false
                })
            }
        })
    })

    document.getElementById('productForm').addEventListener('submit', function(e){
      e.preventDefault()

      //validation
      let isValid = true

        const description = document.getElementById('description').value.trim()
        if(!description){
            const errorE1 = document.getElementById(`description-error`)
            if(errorE1) errorE1.textContent = 'Description is required'            
        }

      const regularprice = parseFloat(document.getElementById('regularprice').value)
      const saleprice = parseFloat(document.getElementById('saleprice').value)
      //const productVriantsalePrice = parseFloat(document.getElementById('salePricevariant').value)

      if(isNaN(regularprice) || regularprice <= 0) {
        isValid = false
        Swal.fire({
            icon: 'error',
            title: 'Invalid Regular price',
            text: 'Regular price must be greater than zero',
            confirmButtonText: 'OK'
        })
        document.getElementById('regularprice-error').textContent = 'Regular price must be greater than zero'
        return
      }

      if(isNaN(saleprice) || saleprice <= 0) {
        isValid = false
        Swal.fire({
            icon: 'error',
            title: 'Invalid sale price',
            text: 'Sale price must be greater than zero',
            confirmButtonText: 'OK'
        })
        document.getElementById('saleprice-error').textContent = 'Sale price must be greater than zero'
        return
      }  
      

      if(saleprice > regularprice) {
        isValid = false
        Swal.fire({
            icon: 'error',
            title: 'Invalid price',
            text: 'Regular price must be greater than sale price',
            confirmButtonText: 'OK'
        })
        document.getElementById('saleprice-error').textContent = 'Sale price cannot be higher than regular price'
        return
      }

     document.querySelectorAll('.variant').forEach((variantE1, index)=>{
        const sku = variantE1.querySelector('.variant-sku')
        const size = variantE1.querySelector('.variant-size')
        const price = variantE1.querySelector('.variant-price')
        const stock = variantE1.querySelector('.variant-stock')

        if(!sku.value.trim()){
            isValid = false
            variantE1.querySelector('.sku-error').textContent = 'SKU is required'
        }

        if(!size.value.trim()){
            isValid = false
            variantE1.querySelector('.size-error').textContent = 'Size is required'
        }

        if(!price.value.trim() || parseFloat(price.value) <= 0){
            isValid = false
            variantE1.querySelector('.price-error').textContent = 'Price must be greater than zero'
        }

        if(!stock.value.trim() || parseInt(stock.value) < 0){
            isValid = false
            variantE1.querySelector('.stock-error').textContent = 'Stock is required'
        }
     })
     const allImagesProcessed = imageStatus.every(status => status === true)
     let imageUploadedCount = 0
     for(let i=1; i<=5; i++){
        if(document.getElementById(`image${i}`).files.length > 0 || document.getElementById(`croppedImages${i}`).value){
            imageUploadedCount++
        }
     }

     if(imageUploadedCount < 5){
        isValid = false
        Swal.fire({
            icon: 'error',
            title: 'Images Required!',
            text: 'Please upload all 5 product images',
            confirmButtonText: 'OK'
        })
        return
     }

     if(isValid){
        const formData = new FormData(this)
        fetch('/admin/add-product', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data =>{
            if(data.success){
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Product added successfully',
                    confirmButtonText: 'OK'
                }).then(()=>{
                    window.location.href = '/admin/products'
                })
            }else {
                console.log(data.message)
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: data.message || 'An error occured while adding the product',
                    confirmButtonText: 'OK'
                })
            }
        })
        .catch(error =>{
            console.error('Error:', error)
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'An unexpected error occured1'
            })
            console.error('Save error: ', error)
        })
     }

    })

    document.getElementById('regularprice').addEventListener('input', function() {
        const regularPrice = parseFloat(this.value);
        //const salePrice = parseFloat(document.getElementById('saleprice').value);

        if (isNaN(regularPrice) || regularPrice <= 0) {
            document.getElementById('regularprice-error').textContent = 'Regular price must be greater than zero';
        } else {
            document.getElementById('regularprice-error').textContent = '';
        }

        // Check sale price relationship
        if (!isNaN(salePrice) && salePrice > regularPrice) {
            document.getElementById('salePrice-error').textContent = 'Sale price cannot be higher than regular price';
        } else {
            document.getElementById('salePrice-error').textContent = '';
        }
    });

    document.getElementById('saleprice').addEventListener('input', function() {
        const salePrice = parseFloat(this.value);
        const regularPrice = parseFloat(document.getElementById('regularprice').value);

        if (isNaN(salePrice) || salePrice <= 0) {
            document.getElementById('salePrice-error').textContent = 'Sale price must be greater than zero';
        } else if (!isNaN(regularPrice) && salePrice > regularPrice) {
            document.getElementById('salePrice-error').textContent = 'Sale price cannot be higher than regular price';
        } else {
            document.getElementById('salePrice-error').textContent = '';
        }
    });

</script>
